#! /bin/zsh

PANEL_FIFO=/tmp/panel-fifo
PANEL_HEIGHT=23
#PANEL_FONT_FAMILY="Source Code Pro for Powerline:size=10"
PANEL_FONT_FAMILY="DejaVu Sans Mono:size=10"
ICON_FONT="FontAwesome:size=12"
ICON_FONT2="fontcustom:size=12"
#export PANEL_FIFO PANEL_HEIGHT PANEL_FONT_FAMILY

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
bspc control --subscribe > "$PANEL_FIFO" &
# xtitle -sf 'T%s' > "$PANEL_FIFO" &

# disk root
#while true; 
#        do
#    		hddroot="$(df -Ph /dev/sda1 | awk '$3 ~ /[0-9]+/ {print $4}')"
#		echo 'd  root ' $hddroot;	
#    	sleep 1
#done > "$PANEL_FIFO" &

# disk data
while true; 
do
	hdddata="$(df -Ph / | awk '$3 ~ /[0-9]+/ {print $3}')"
	echo 'e  hdd' $hdddata;	
	sleep 100.0
done > "$PANEL_FIFO" &

# cpu
#while true;
#	do
#		cpu="$(eval $(awk '/^cpu /{print "previdle="$5";prevtotal="$2+$3+$4+$5}' /proc/stat);sleep 0.4;eval $(awk '/^cpu /{print "idle="$5";total="$2+$3+$4+$5}' /proc/stat);intervaltotal=$((total-${prevtotal:-0}));echo -ne "$((100*((intervaltotal)-($idle-${previdle:-0}))/(intervaltotal)))")"
#        	echo 'B ' $cpu;
#	sleep 1.0
#done > "$PANEL_FIFO" &

# battery
while true;
do
	PERCENT="$(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep 'percentage' | tr -d ' ' | cut -d ':' -f 2 | cut -d '%' -f 1)"
		if [ $PERCENT -ge 80 ]
		then
			echo E'\uf240' $PERCENT
		fi
		if [ $PERCENT -ge 60 -a $PERCENT -lt 80 ]
		then
			echo E'\uf241' $PERCENT
		fi
		if [ $PERCENT -ge 40 -a $PERCENT -lt 60 ]
		then
			echo E'\uf242' $PERCENT
		fi
		if [ $PERCENT -ge 20 -a $PERCENT -lt 40 ]
		then
			echo E'\uf243' $PERCENT
		fi
		if [ $PERCENT -lt 20]
		then
			echo E'\uf244' $PERCENT
		fi
	sleep 30.0;
done > "$PANEL_FIFO" &


# clock
while true;
do
	echo 'C' $(date +"%H:%M");
	sleep 50.0;
done > "$PANEL_FIFO" &

# date
while true;
do 
	echo 'D' $(date +'%a %b %d');
	sleep 10000.0
done > $PANEL_FIFO &

#alsa volume
while true;
do
    ALSA_STATE=$(amixer get Master | grep 'Mono: Playback' | grep '\[on]')
    ALSA_VOLUME=$(amixer get Master | grep 'Mono: Playback' | grep -o '...%' | sed 's/\[//' | sed 's/%//' | sed 's/ //')

	if [ $ALSA_STATE ]
	then
		if [ $ALSA_VOLUME -ge 50 ]
		then
			echo V'\uf028' $ALSA_VOLUME
		fi
		if [ $ALSA_VOLUME -gt 0 -a $ALSA_VOLUME -lt 50 ]
		then
			echo V'\uf027' $ALSA_VOLUME
		fi
		if [ $ALSA_VOLUME -eq 0 ]
		then
			echo V'\uf026' $ALSA_VOLUME
		fi
	else
		echo V'\uf026'
	fi
	sleep 1.0
done > $PANEL_FIFO &


# wifi
while true;
do
	SSID=$(essid -w wlp3s0)
	echo L'' $SSID
	sleep 5.0
done > $PANEL_FIFO &

# music controls
#while true;
#do
#	SONG_NAME=$(mpc current)
#	if [[ -z $(mpc current) ]]
#	then
#		# no music in playlist, or mpd is not running
#		echo "R%{F$COLOR_INACTIVE_MONITOR_FG}%{T3}%{A:mpc listall | mpc add; mpc shuffle; mpc play:}%{A3:mpd:}\uf19c  \uf198  \uf17c%{A}%{A}%{T1}%{F-}"
#	else
#		if [[ -n $(mpc status | grep paused) ]]
#		then
#			# music is paused
#			echo "R%{F$COLOR_INACTIVE_MONITOR_FG}%{T3}%{A:mpc prev:}\uf19c %{A}%{A:mpc play:}%{A3:mpc clear:}$SONG_NAME%{A}%{A}%{A:mpc next:} \uf17c%{A}%{T1}%{F-}"
#		else
#			# music is playing
#			echo "R%{F$COLOR_FOCUSED_OCCUPIED_FG}%{T3}%{A:mpc prev:}\uf19c %{A}%{A:mpc pause:}%{A3:mpc clear:}$SONG_NAME%{A}%{A}%{A:mpc next:} \uf17c%{A}%{T1}%{F-}"
#		fi
#	fi
#	sleep 1.0
#done > $PANEL_FIFO &


. ~/.panel/panel_colors

cat "$PANEL_FIFO" | ~/.panel/panel_bar | lemonbar -g x$PANEL_HEIGHT -f "$PANEL_FONT_FAMILY" -f "$ICON_FONT" -f "$ICON_FONT2" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 2 | zsh &

wait
